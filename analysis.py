"""
Analysis of the performance of the K-means algorithm as opposed to symNMF
"""
import sys
import math
import sklearn
import sklearn.metrics
import symnmf
import kmeans
import symnmf_extension

def extract_cmd():
    """
    Extracts command line arguments from the user.

    Parameters:
        None.

    Returns:
        A tuple containing the number of clusters, goal and input file path.
    """
    if len(sys.argv) != 3:
        symnmf.exit_error()
    return int(sys.argv[1]), sys.argv[2]

def calculate_distance(cluster_centroid, point_values):
    """
    Calculates the Euclidean distance between a cluster centroid and a point.

    Parameters:
        cluster_centroid (list): A list representing the coordinates of the cluster centroid.
        point_values (list): A list representing the coordinates of the point.

    Returns:
        float: The Euclidean distance between the cluster centroid and the point.
    """
    return math.sqrt(sum((cluster_centroid[i] - point_values[i]) ** 2 for i in range(len(cluster_centroid))))

def find_closest_clusters(clusters, data_points):
    """
    Finds the closest cluster to each point and returns a list
    holding the index of the closest cluster to each point.

    Parameters:
        clusters(list): A 2-dimensional list holding the clusters.
        data_points: A 2-dimensional list holding the data points.

    Returns:
        A list holding the index of the closest cluster corresponding to each point.
    """
    closest_clusters = [min(enumerate(clusters), key=lambda x:
                            calculate_distance(x[1], point))[0] for point in data_points]
    return closest_clusters

def calculate_silhouette_score(k_means_clusters, symnmf_clusters, data_points):
    """
    Calculates the silhouette score for both the K-means and symNMF out put clusters.

    Parameters:
        k_means_clusters: A 1-dimensional list holding the closest cluster to each point generated by K-means.
        symnmf_clusters:  A 1-dimensional list holding the closest cluster to each point generated by symNMF.
        data_points: A 2-dimensional list holding the data points.

    Returns:
        A tuple holding the K-means and symNMF silhouette scores.
    """
    k_means_score = sklearn.metrics.silhouette_score(data_points, k_means_clusters)
    symnmf_score = sklearn.metrics.silhouette_score(data_points, symnmf_clusters)
    return k_means_score, symnmf_score

def main():
    """
    Run a comparison between the K-means and symNMF algorithms

    Parameters:
        None.

    Returns:
        Nothing.
    """
    number_of_clusters, input_file = extract_cmd()
    data_points = symnmf.parse_input_file(input_file)
    k_means_clusters = kmeans.k_means(number_of_clusters, 300, data_points)
    normalized_similarity_matrix = symnmf_extension.norm(data_points)
    symnmf_clusters = symnmf.initialize_association_matrix(normalized_similarity_matrix,
                                                            number_of_clusters)
    symnmf_clusters = symnmf_extension.symnmf(symnmf_clusters, normalized_similarity_matrix)
    k_means_closest_clusters = find_closest_clusters(k_means_clusters, data_points)
    symnmf_closest_clusters = find_closest_clusters(symnmf_clusters, data_points)
    k_means_score, symnmf_score = calculate_silhouette_score(k_means_closest_clusters,
                                                             symnmf_closest_clusters, data_points)
    print(f"kmeans: {k_means_score:.4f}")
    print(f"nmf: {symnmf_score:.4f}")

if __name__ == "__main__":
    main()
